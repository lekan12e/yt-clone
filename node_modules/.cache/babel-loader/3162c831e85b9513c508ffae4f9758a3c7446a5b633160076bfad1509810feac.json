{"ast":null,"code":"function AxiosRateLimit(axios) {\n  this.queue = [];\n  this.timeslotRequests = 0;\n  this.interceptors = {\n    request: null,\n    response: null\n  };\n  this.handleRequest = this.handleRequest.bind(this);\n  this.handleResponse = this.handleResponse.bind(this);\n  this.enable(axios);\n}\nAxiosRateLimit.prototype.getMaxRPS = function () {\n  var perSeconds = this.perMilliseconds / 1000;\n  return this.maxRequests / perSeconds;\n};\nAxiosRateLimit.prototype.setMaxRPS = function (rps) {\n  this.setRateLimitOptions({\n    maxRequests: rps,\n    perMilliseconds: 1000\n  });\n};\nAxiosRateLimit.prototype.setRateLimitOptions = function (options) {\n  if (options.maxRPS) {\n    this.setMaxRPS(options.maxRPS);\n  } else {\n    this.perMilliseconds = options.perMilliseconds;\n    this.maxRequests = options.maxRequests;\n  }\n};\nAxiosRateLimit.prototype.enable = function (axios) {\n  function handleError(error) {\n    return Promise.reject(error);\n  }\n  this.interceptors.request = axios.interceptors.request.use(this.handleRequest, handleError);\n  this.interceptors.response = axios.interceptors.response.use(this.handleResponse, handleError);\n};\nAxiosRateLimit.prototype.handleRequest = function (request) {\n  return new Promise(function (resolve) {\n    this.push({\n      resolve: function () {\n        resolve(request);\n      }\n    });\n  }.bind(this));\n};\nAxiosRateLimit.prototype.handleResponse = function (response) {\n  this.shift();\n  return response;\n};\nAxiosRateLimit.prototype.push = function (requestHandler) {\n  this.queue.push(requestHandler);\n  this.shiftInitial();\n};\nAxiosRateLimit.prototype.shiftInitial = function () {\n  setTimeout(function () {\n    return this.shift();\n  }.bind(this), 0);\n};\nAxiosRateLimit.prototype.shift = function () {\n  if (!this.queue.length) return;\n  if (this.timeslotRequests === this.maxRequests) {\n    if (this.timeoutId && typeof this.timeoutId.ref === 'function') {\n      this.timeoutId.ref();\n    }\n    return;\n  }\n  var queued = this.queue.shift();\n  queued.resolve();\n  if (this.timeslotRequests === 0) {\n    this.timeoutId = setTimeout(function () {\n      this.timeslotRequests = 0;\n      this.shift();\n    }.bind(this), this.perMilliseconds);\n    if (typeof this.timeoutId.unref === 'function') {\n      if (this.queue.length === 0) this.timeoutId.unref();\n    }\n  }\n  this.timeslotRequests += 1;\n};\n\n/**\n * Apply rate limit to axios instance.\n *\n * @example\n *   import axios from 'axios';\n *   import rateLimit from 'axios-rate-limit';\n *\n *   // sets max 2 requests per 1 second, other will be delayed\n *   // note maxRPS is a shorthand for perMilliseconds: 1000, and it takes precedence\n *   // if specified both with maxRequests and perMilliseconds\n *   const http = rateLimit(axios.create(), { maxRequests: 2, perMilliseconds: 1000, maxRPS: 2 })\n*    http.getMaxRPS() // 2\n *   http.get('https://example.com/api/v1/users.json?page=1') // will perform immediately\n *   http.get('https://example.com/api/v1/users.json?page=2') // will perform immediately\n *   http.get('https://example.com/api/v1/users.json?page=3') // will perform after 1 second from the first one\n *   http.setMaxRPS(3)\n *   http.getMaxRPS() // 3\n *   http.setRateLimitOptions({ maxRequests: 6, perMilliseconds: 150 }) // same options as constructor\n *\n * @param {Object} axios axios instance\n * @param {Object} options options for rate limit, available for live update\n * @param {Number} options.maxRequests max requests to perform concurrently in given amount of time.\n * @param {Number} options.perMilliseconds amount of time to limit concurrent requests.\n * @returns {Object} axios instance with interceptors added\n */\nfunction axiosRateLimit(axios, options) {\n  var rateLimitInstance = new AxiosRateLimit(axios);\n  rateLimitInstance.setRateLimitOptions(options);\n  axios.getMaxRPS = AxiosRateLimit.prototype.getMaxRPS.bind(rateLimitInstance);\n  axios.setMaxRPS = AxiosRateLimit.prototype.setMaxRPS.bind(rateLimitInstance);\n  axios.setRateLimitOptions = AxiosRateLimit.prototype.setRateLimitOptions.bind(rateLimitInstance);\n  return axios;\n}\nmodule.exports = axiosRateLimit;","map":{"version":3,"names":["AxiosRateLimit","axios","queue","timeslotRequests","interceptors","request","response","handleRequest","bind","handleResponse","enable","prototype","getMaxRPS","perSeconds","perMilliseconds","maxRequests","setMaxRPS","rps","setRateLimitOptions","options","maxRPS","handleError","error","Promise","reject","use","resolve","push","shift","requestHandler","shiftInitial","setTimeout","length","timeoutId","ref","queued","unref","axiosRateLimit","rateLimitInstance","module","exports"],"sources":["C:/Users/Admin/node_modules/axios-rate-limit/src/index.js"],"sourcesContent":["function AxiosRateLimit (axios) {\n  this.queue = []\n  this.timeslotRequests = 0\n\n  this.interceptors = {\n    request: null,\n    response: null\n  }\n\n  this.handleRequest = this.handleRequest.bind(this)\n  this.handleResponse = this.handleResponse.bind(this)\n\n  this.enable(axios)\n}\n\nAxiosRateLimit.prototype.getMaxRPS = function () {\n  var perSeconds = (this.perMilliseconds / 1000)\n  return this.maxRequests / perSeconds\n}\n\nAxiosRateLimit.prototype.setMaxRPS = function (rps) {\n  this.setRateLimitOptions({\n    maxRequests: rps,\n    perMilliseconds: 1000\n  })\n}\n\nAxiosRateLimit.prototype.setRateLimitOptions = function (options) {\n  if (options.maxRPS) {\n    this.setMaxRPS(options.maxRPS)\n  } else {\n    this.perMilliseconds = options.perMilliseconds\n    this.maxRequests = options.maxRequests\n  }\n}\n\nAxiosRateLimit.prototype.enable = function (axios) {\n  function handleError (error) {\n    return Promise.reject(error)\n  }\n\n  this.interceptors.request = axios.interceptors.request.use(\n    this.handleRequest,\n    handleError\n  )\n  this.interceptors.response = axios.interceptors.response.use(\n    this.handleResponse,\n    handleError\n  )\n}\n\nAxiosRateLimit.prototype.handleRequest = function (request) {\n  return new Promise(function (resolve) {\n    this.push({ resolve: function () { resolve(request) } })\n  }.bind(this))\n}\n\nAxiosRateLimit.prototype.handleResponse = function (response) {\n  this.shift()\n  return response\n}\n\nAxiosRateLimit.prototype.push = function (requestHandler) {\n  this.queue.push(requestHandler)\n  this.shiftInitial()\n}\n\nAxiosRateLimit.prototype.shiftInitial = function () {\n  setTimeout(function () { return this.shift() }.bind(this), 0)\n}\n\nAxiosRateLimit.prototype.shift = function () {\n  if (!this.queue.length) return\n  if (this.timeslotRequests === this.maxRequests) {\n    if (this.timeoutId && typeof this.timeoutId.ref === 'function') {\n      this.timeoutId.ref()\n    }\n\n    return\n  }\n\n  var queued = this.queue.shift()\n  queued.resolve()\n\n  if (this.timeslotRequests === 0) {\n    this.timeoutId = setTimeout(function () {\n      this.timeslotRequests = 0\n      this.shift()\n    }.bind(this), this.perMilliseconds)\n\n    if (typeof this.timeoutId.unref === 'function') {\n      if (this.queue.length === 0) this.timeoutId.unref()\n    }\n  }\n\n  this.timeslotRequests += 1\n}\n\n/**\n * Apply rate limit to axios instance.\n *\n * @example\n *   import axios from 'axios';\n *   import rateLimit from 'axios-rate-limit';\n *\n *   // sets max 2 requests per 1 second, other will be delayed\n *   // note maxRPS is a shorthand for perMilliseconds: 1000, and it takes precedence\n *   // if specified both with maxRequests and perMilliseconds\n *   const http = rateLimit(axios.create(), { maxRequests: 2, perMilliseconds: 1000, maxRPS: 2 })\n*    http.getMaxRPS() // 2\n *   http.get('https://example.com/api/v1/users.json?page=1') // will perform immediately\n *   http.get('https://example.com/api/v1/users.json?page=2') // will perform immediately\n *   http.get('https://example.com/api/v1/users.json?page=3') // will perform after 1 second from the first one\n *   http.setMaxRPS(3)\n *   http.getMaxRPS() // 3\n *   http.setRateLimitOptions({ maxRequests: 6, perMilliseconds: 150 }) // same options as constructor\n *\n * @param {Object} axios axios instance\n * @param {Object} options options for rate limit, available for live update\n * @param {Number} options.maxRequests max requests to perform concurrently in given amount of time.\n * @param {Number} options.perMilliseconds amount of time to limit concurrent requests.\n * @returns {Object} axios instance with interceptors added\n */\nfunction axiosRateLimit (axios, options) {\n  var rateLimitInstance = new AxiosRateLimit(axios)\n  rateLimitInstance.setRateLimitOptions(options)\n\n  axios.getMaxRPS = AxiosRateLimit.prototype.getMaxRPS.bind(rateLimitInstance)\n  axios.setMaxRPS = AxiosRateLimit.prototype.setMaxRPS.bind(rateLimitInstance)\n  axios.setRateLimitOptions = AxiosRateLimit.prototype.setRateLimitOptions\n    .bind(rateLimitInstance)\n\n  return axios\n}\n\nmodule.exports = axiosRateLimit\n"],"mappings":"AAAA,SAASA,cAAcA,CAAEC,KAAK,EAAE;EAC9B,IAAI,CAACC,KAAK,GAAG,EAAE;EACf,IAAI,CAACC,gBAAgB,GAAG,CAAC;EAEzB,IAAI,CAACC,YAAY,GAAG;IAClBC,OAAO,EAAE,IAAI;IACbC,QAAQ,EAAE;EACZ,CAAC;EAED,IAAI,CAACC,aAAa,GAAG,IAAI,CAACA,aAAa,CAACC,IAAI,CAAC,IAAI,CAAC;EAClD,IAAI,CAACC,cAAc,GAAG,IAAI,CAACA,cAAc,CAACD,IAAI,CAAC,IAAI,CAAC;EAEpD,IAAI,CAACE,MAAM,CAACT,KAAK,CAAC;AACpB;AAEAD,cAAc,CAACW,SAAS,CAACC,SAAS,GAAG,YAAY;EAC/C,IAAIC,UAAU,GAAI,IAAI,CAACC,eAAe,GAAG,IAAK;EAC9C,OAAO,IAAI,CAACC,WAAW,GAAGF,UAAU;AACtC,CAAC;AAEDb,cAAc,CAACW,SAAS,CAACK,SAAS,GAAG,UAAUC,GAAG,EAAE;EAClD,IAAI,CAACC,mBAAmB,CAAC;IACvBH,WAAW,EAAEE,GAAG;IAChBH,eAAe,EAAE;EACnB,CAAC,CAAC;AACJ,CAAC;AAEDd,cAAc,CAACW,SAAS,CAACO,mBAAmB,GAAG,UAAUC,OAAO,EAAE;EAChE,IAAIA,OAAO,CAACC,MAAM,EAAE;IAClB,IAAI,CAACJ,SAAS,CAACG,OAAO,CAACC,MAAM,CAAC;EAChC,CAAC,MAAM;IACL,IAAI,CAACN,eAAe,GAAGK,OAAO,CAACL,eAAe;IAC9C,IAAI,CAACC,WAAW,GAAGI,OAAO,CAACJ,WAAW;EACxC;AACF,CAAC;AAEDf,cAAc,CAACW,SAAS,CAACD,MAAM,GAAG,UAAUT,KAAK,EAAE;EACjD,SAASoB,WAAWA,CAAEC,KAAK,EAAE;IAC3B,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;EAC9B;EAEA,IAAI,CAAClB,YAAY,CAACC,OAAO,GAAGJ,KAAK,CAACG,YAAY,CAACC,OAAO,CAACoB,GAAG,CACxD,IAAI,CAAClB,aAAa,EAClBc,WACF,CAAC;EACD,IAAI,CAACjB,YAAY,CAACE,QAAQ,GAAGL,KAAK,CAACG,YAAY,CAACE,QAAQ,CAACmB,GAAG,CAC1D,IAAI,CAAChB,cAAc,EACnBY,WACF,CAAC;AACH,CAAC;AAEDrB,cAAc,CAACW,SAAS,CAACJ,aAAa,GAAG,UAAUF,OAAO,EAAE;EAC1D,OAAO,IAAIkB,OAAO,CAAC,UAAUG,OAAO,EAAE;IACpC,IAAI,CAACC,IAAI,CAAC;MAAED,OAAO,EAAE,SAAAA,CAAA,EAAY;QAAEA,OAAO,CAACrB,OAAO,CAAC;MAAC;IAAE,CAAC,CAAC;EAC1D,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC,CAAC;AACf,CAAC;AAEDR,cAAc,CAACW,SAAS,CAACF,cAAc,GAAG,UAAUH,QAAQ,EAAE;EAC5D,IAAI,CAACsB,KAAK,CAAC,CAAC;EACZ,OAAOtB,QAAQ;AACjB,CAAC;AAEDN,cAAc,CAACW,SAAS,CAACgB,IAAI,GAAG,UAAUE,cAAc,EAAE;EACxD,IAAI,CAAC3B,KAAK,CAACyB,IAAI,CAACE,cAAc,CAAC;EAC/B,IAAI,CAACC,YAAY,CAAC,CAAC;AACrB,CAAC;AAED9B,cAAc,CAACW,SAAS,CAACmB,YAAY,GAAG,YAAY;EAClDC,UAAU,CAAC,YAAY;IAAE,OAAO,IAAI,CAACH,KAAK,CAAC,CAAC;EAAC,CAAC,CAACpB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC/D,CAAC;AAEDR,cAAc,CAACW,SAAS,CAACiB,KAAK,GAAG,YAAY;EAC3C,IAAI,CAAC,IAAI,CAAC1B,KAAK,CAAC8B,MAAM,EAAE;EACxB,IAAI,IAAI,CAAC7B,gBAAgB,KAAK,IAAI,CAACY,WAAW,EAAE;IAC9C,IAAI,IAAI,CAACkB,SAAS,IAAI,OAAO,IAAI,CAACA,SAAS,CAACC,GAAG,KAAK,UAAU,EAAE;MAC9D,IAAI,CAACD,SAAS,CAACC,GAAG,CAAC,CAAC;IACtB;IAEA;EACF;EAEA,IAAIC,MAAM,GAAG,IAAI,CAACjC,KAAK,CAAC0B,KAAK,CAAC,CAAC;EAC/BO,MAAM,CAACT,OAAO,CAAC,CAAC;EAEhB,IAAI,IAAI,CAACvB,gBAAgB,KAAK,CAAC,EAAE;IAC/B,IAAI,CAAC8B,SAAS,GAAGF,UAAU,CAAC,YAAY;MACtC,IAAI,CAAC5B,gBAAgB,GAAG,CAAC;MACzB,IAAI,CAACyB,KAAK,CAAC,CAAC;IACd,CAAC,CAACpB,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAACM,eAAe,CAAC;IAEnC,IAAI,OAAO,IAAI,CAACmB,SAAS,CAACG,KAAK,KAAK,UAAU,EAAE;MAC9C,IAAI,IAAI,CAAClC,KAAK,CAAC8B,MAAM,KAAK,CAAC,EAAE,IAAI,CAACC,SAAS,CAACG,KAAK,CAAC,CAAC;IACrD;EACF;EAEA,IAAI,CAACjC,gBAAgB,IAAI,CAAC;AAC5B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkC,cAAcA,CAAEpC,KAAK,EAAEkB,OAAO,EAAE;EACvC,IAAImB,iBAAiB,GAAG,IAAItC,cAAc,CAACC,KAAK,CAAC;EACjDqC,iBAAiB,CAACpB,mBAAmB,CAACC,OAAO,CAAC;EAE9ClB,KAAK,CAACW,SAAS,GAAGZ,cAAc,CAACW,SAAS,CAACC,SAAS,CAACJ,IAAI,CAAC8B,iBAAiB,CAAC;EAC5ErC,KAAK,CAACe,SAAS,GAAGhB,cAAc,CAACW,SAAS,CAACK,SAAS,CAACR,IAAI,CAAC8B,iBAAiB,CAAC;EAC5ErC,KAAK,CAACiB,mBAAmB,GAAGlB,cAAc,CAACW,SAAS,CAACO,mBAAmB,CACrEV,IAAI,CAAC8B,iBAAiB,CAAC;EAE1B,OAAOrC,KAAK;AACd;AAEAsC,MAAM,CAACC,OAAO,GAAGH,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}